// <auto-generated />
using System;
using DBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241029081459_Celladd")]
    partial class Celladd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBase.Models.Customer", b =>
                {
                    b.Property<Guid>("ID_Customer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID_Customer");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID_Customer = new Guid("deeea0e9-096e-45f9-9411-387a66eac70f"),
                            Address = "123 Main St, Anytown, USA",
                            Auto = 0,
                            CustomerName = "John Doe",
                            Email = "john.doe@example.com",
                            Phone = "111-222-3333"
                        },
                        new
                        {
                            ID_Customer = new Guid("08d4e9f2-df76-4057-849d-9e86c882a9f6"),
                            Address = "456 Elm St, Othertown, USA",
                            Auto = 0,
                            CustomerName = "Jane Smith",
                            Email = "jane.smith@example.com",
                            Phone = "444-555-6666"
                        },
                        new
                        {
                            ID_Customer = new Guid("079803a8-edfd-480f-8727-a9f68a0695b7"),
                            Address = "789 Pine St, Sometown, USA",
                            Auto = 0,
                            CustomerName = "Alice Johnson",
                            Email = "alice.johnson@example.com",
                            Phone = "222-333-4444"
                        },
                        new
                        {
                            ID_Customer = new Guid("6e91d741-be01-40f4-8694-bffead189ca8"),
                            Address = "321 Oak St, Anothertown, USA",
                            Auto = 0,
                            CustomerName = "Bob Brown",
                            Email = "bob.brown@example.com",
                            Phone = "555-666-7777"
                        });
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.Property<Guid>("ID_Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("ID_Order");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID_Order = new Guid("d88e0641-41a3-4bcc-ace5-a939ec3612ca"),
                            Auto = 0,
                            CustomerID = new Guid("deeea0e9-096e-45f9-9411-387a66eac70f"),
                            OrderDate = new DateTime(2024, 10, 29, 8, 14, 59, 60, DateTimeKind.Utc).AddTicks(9306),
                            Status = "Completed",
                            TotalAmount = 25.00m
                        },
                        new
                        {
                            ID_Order = new Guid("d16665d6-ec3b-4628-8551-dc8d7eb92a9e"),
                            Auto = 0,
                            CustomerID = new Guid("08d4e9f2-df76-4057-849d-9e86c882a9f6"),
                            OrderDate = new DateTime(2024, 10, 29, 8, 14, 59, 60, DateTimeKind.Utc).AddTicks(9315),
                            Status = "Pending",
                            TotalAmount = 30.00m
                        },
                        new
                        {
                            ID_Order = new Guid("6df16525-d3ed-4aea-b2ed-4f339eb4ff00"),
                            Auto = 0,
                            CustomerID = new Guid("079803a8-edfd-480f-8727-a9f68a0695b7"),
                            OrderDate = new DateTime(2024, 10, 29, 8, 14, 59, 60, DateTimeKind.Utc).AddTicks(9319),
                            Status = "Completed",
                            TotalAmount = 50.00m
                        },
                        new
                        {
                            ID_Order = new Guid("abe81b9d-1c56-468d-a30f-2ff4d17b547b"),
                            Auto = 0,
                            CustomerID = new Guid("6e91d741-be01-40f4-8694-bffead189ca8"),
                            OrderDate = new DateTime(2024, 10, 29, 8, 14, 59, 60, DateTimeKind.Utc).AddTicks(9323),
                            Status = "Shipped",
                            TotalAmount = 70.00m
                        });
                });

            modelBuilder.Entity("DBase.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("ID_OrderDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ID_OrderDetails");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            ID_OrderDetails = new Guid("37e93242-069d-483a-ba6b-8ef23a2f6716"),
                            Auto = 0,
                            OrderId = new Guid("d88e0641-41a3-4bcc-ace5-a939ec3612ca"),
                            ProductId = new Guid("44951b94-d737-4c0e-9ef7-d29dd366175b"),
                            Quantity = 2,
                            UnitPrice = 10.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("4b94a5a9-f803-42d6-8b22-cd5898b3a7e5"),
                            Auto = 0,
                            OrderId = new Guid("d88e0641-41a3-4bcc-ace5-a939ec3612ca"),
                            ProductId = new Guid("3658ac8c-7640-43dd-86a7-bb69b10ffbf6"),
                            Quantity = 1,
                            UnitPrice = 15.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("db579e5e-1e39-4cc8-8f0c-3e7b5b62a52b"),
                            Auto = 0,
                            OrderId = new Guid("d16665d6-ec3b-4628-8551-dc8d7eb92a9e"),
                            ProductId = new Guid("cb03ff15-967a-435b-b9d1-e2458430aa78"),
                            Quantity = 1,
                            UnitPrice = 20.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("576b19fe-a493-4b2c-be3b-45f9def2f219"),
                            Auto = 0,
                            OrderId = new Guid("6df16525-d3ed-4aea-b2ed-4f339eb4ff00"),
                            ProductId = new Guid("225cb8bf-0d64-4e14-a3c5-9bf0aabf19c8"),
                            Quantity = 2,
                            UnitPrice = 25.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("e4f27535-8b80-4f64-966f-1708e126d41f"),
                            Auto = 0,
                            OrderId = new Guid("6df16525-d3ed-4aea-b2ed-4f339eb4ff00"),
                            ProductId = new Guid("41bcbcfc-241e-488b-af2a-5f6a5dbb0e06"),
                            Quantity = 1,
                            UnitPrice = 30.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("95bd81f1-8e17-493f-8097-68afec0bac71"),
                            Auto = 0,
                            OrderId = new Guid("abe81b9d-1c56-468d-a30f-2ff4d17b547b"),
                            ProductId = new Guid("18344cc7-03b8-4a3a-8aee-6f2cd6fb2156"),
                            Quantity = 2,
                            UnitPrice = 35.00m
                        });
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.Property<Guid>("ID_Product")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("Cell")
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<string>("Producer")
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uuid");

                    b.HasKey("ID_Product");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID_Product = new Guid("44951b94-d737-4c0e-9ef7-d29dd366175b"),
                            Auto = 0,
                            Cell = "a100",
                            Producer = "Producer 1",
                            ProductName = "Product 1",
                            QuantityInStock = 100,
                            SupplierID = new Guid("8c101589-4f3e-4e68-b4ab-e2a7865b04e4"),
                            UnitPrice = 10.00m,
                            WarehouseID = new Guid("24a7253d-a080-4de8-a276-4c51023bc2f2")
                        },
                        new
                        {
                            ID_Product = new Guid("3658ac8c-7640-43dd-86a7-bb69b10ffbf6"),
                            Auto = 0,
                            Cell = "a101",
                            Producer = "Producer 2",
                            ProductName = "Product 2",
                            QuantityInStock = 200,
                            SupplierID = new Guid("8c101589-4f3e-4e68-b4ab-e2a7865b04e4"),
                            UnitPrice = 15.00m,
                            WarehouseID = new Guid("24a7253d-a080-4de8-a276-4c51023bc2f2")
                        },
                        new
                        {
                            ID_Product = new Guid("cb03ff15-967a-435b-b9d1-e2458430aa78"),
                            Auto = 0,
                            Cell = "a102",
                            Producer = "Producer 2",
                            ProductName = "Product 3",
                            QuantityInStock = 150,
                            SupplierID = new Guid("7f6216db-5696-4b47-a0d7-7522811b800c"),
                            UnitPrice = 20.00m,
                            WarehouseID = new Guid("654fe7db-a286-4954-9659-f63c3dea2561")
                        },
                        new
                        {
                            ID_Product = new Guid("225cb8bf-0d64-4e14-a3c5-9bf0aabf19c8"),
                            Auto = 0,
                            Cell = "a103",
                            Producer = "Producer 2",
                            ProductName = "Product 4",
                            QuantityInStock = 80,
                            SupplierID = new Guid("4ab6969a-79cd-4f8b-b031-d75d608ac69a"),
                            UnitPrice = 25.00m,
                            WarehouseID = new Guid("3f88d6f5-f73b-4b26-98ac-366976420924")
                        },
                        new
                        {
                            ID_Product = new Guid("41bcbcfc-241e-488b-af2a-5f6a5dbb0e06"),
                            Auto = 0,
                            Cell = "a104",
                            Producer = "Producer 3",
                            ProductName = "Product 5",
                            QuantityInStock = 60,
                            SupplierID = new Guid("4ab6969a-79cd-4f8b-b031-d75d608ac69a"),
                            UnitPrice = 30.00m,
                            WarehouseID = new Guid("3f88d6f5-f73b-4b26-98ac-366976420924")
                        },
                        new
                        {
                            ID_Product = new Guid("18344cc7-03b8-4a3a-8aee-6f2cd6fb2156"),
                            Auto = 0,
                            Cell = "a105",
                            Producer = "Producer 3",
                            ProductName = "Product 6",
                            QuantityInStock = 40,
                            SupplierID = new Guid("f36c1003-7533-406a-91b4-f39db2586d1f"),
                            UnitPrice = 35.00m,
                            WarehouseID = new Guid("f1c35c81-6a13-4081-9a1e-a78174f5a509")
                        });
                });

            modelBuilder.Entity("DBase.Models.Supplier", b =>
                {
                    b.Property<Guid>("ID_Supplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("ContactName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID_Supplier");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            ID_Supplier = new Guid("8c101589-4f3e-4e68-b4ab-e2a7865b04e4"),
                            Auto = 0,
                            ContactName = "Alice",
                            Email = "alice@supplier.com",
                            Phone = "123-456-7890",
                            SupplierName = "Supplier A"
                        },
                        new
                        {
                            ID_Supplier = new Guid("7f6216db-5696-4b47-a0d7-7522811b800c"),
                            Auto = 0,
                            ContactName = "Bob",
                            Email = "bob@supplier.com",
                            Phone = "098-765-4321",
                            SupplierName = "Supplier B"
                        },
                        new
                        {
                            ID_Supplier = new Guid("4ab6969a-79cd-4f8b-b031-d75d608ac69a"),
                            Auto = 0,
                            ContactName = "Charlie",
                            Email = "charlie@supplier.com",
                            Phone = "321-654-0987",
                            SupplierName = "Supplier C"
                        },
                        new
                        {
                            ID_Supplier = new Guid("f36c1003-7533-406a-91b4-f39db2586d1f"),
                            Auto = 0,
                            ContactName = "Diana",
                            Email = "diana@supplier.com",
                            Phone = "987-654-3210",
                            SupplierName = "Supplier D"
                        });
                });

            modelBuilder.Entity("DBase.Models.Warehouse", b =>
                {
                    b.Property<Guid>("ID_Warehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID_Warehouse");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            ID_Warehouse = new Guid("24a7253d-a080-4de8-a276-4c51023bc2f2"),
                            Auto = 0,
                            Capacity = 1000,
                            Location = "Location A",
                            ManagerName = "Manager A",
                            WarehouseName = "Warehouse 1"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("654fe7db-a286-4954-9659-f63c3dea2561"),
                            Auto = 0,
                            Capacity = 2000,
                            Location = "Location B",
                            ManagerName = "Manager B",
                            WarehouseName = "Warehouse 2"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("3f88d6f5-f73b-4b26-98ac-366976420924"),
                            Auto = 0,
                            Capacity = 1500,
                            Location = "Location C",
                            ManagerName = "Manager C",
                            WarehouseName = "Warehouse 3"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("f1c35c81-6a13-4081-9a1e-a78174f5a509"),
                            Auto = 0,
                            Capacity = 2500,
                            Location = "Location D",
                            ManagerName = "Manager D",
                            WarehouseName = "Warehouse 4"
                        });
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.HasOne("DBase.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DBase.Models.OrderDetail", b =>
                {
                    b.HasOne("DBase.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBase.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.HasOne("DBase.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBase.Models.Warehouse", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DBase.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DBase.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DBase.Models.Warehouse", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
