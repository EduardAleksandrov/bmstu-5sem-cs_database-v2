// <auto-generated />
using System;
using DBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241028103231_AddSeedsv")]
    partial class AddSeedsv
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBase.Models.Customer", b =>
                {
                    b.Property<Guid>("ID_Customer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID_Customer");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID_Customer = new Guid("5f070460-535c-4d34-9dcc-64ef70dcaa10"),
                            Address = "123 Main St, Anytown, USA",
                            Auto = 0,
                            CustomerName = "John Doe",
                            Email = "john.doe@example.com",
                            Phone = "111-222-3333"
                        },
                        new
                        {
                            ID_Customer = new Guid("ef456aed-853b-484a-9b8e-7a354343a9f6"),
                            Address = "456 Elm St, Othertown, USA",
                            Auto = 0,
                            CustomerName = "Jane Smith",
                            Email = "jane.smith@example.com",
                            Phone = "444-555-6666"
                        },
                        new
                        {
                            ID_Customer = new Guid("62b36541-e014-4dc8-a5c8-0c8d67fe4e2d"),
                            Address = "789 Pine St, Sometown, USA",
                            Auto = 0,
                            CustomerName = "Alice Johnson",
                            Email = "alice.johnson@example.com",
                            Phone = "222-333-4444"
                        },
                        new
                        {
                            ID_Customer = new Guid("44c3edca-e622-4a7b-8089-01dc3f51fac4"),
                            Address = "321 Oak St, Anothertown, USA",
                            Auto = 0,
                            CustomerName = "Bob Brown",
                            Email = "bob.brown@example.com",
                            Phone = "555-666-7777"
                        });
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.Property<Guid>("ID_Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("ID_Order");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID_Order = new Guid("8c7d5b08-505d-4d00-9557-866648608c4e"),
                            Auto = 0,
                            CustomerID = new Guid("5f070460-535c-4d34-9dcc-64ef70dcaa10"),
                            OrderDate = new DateTime(2024, 10, 28, 10, 32, 31, 182, DateTimeKind.Utc).AddTicks(8772),
                            Status = "Completed",
                            TotalAmount = 25.00m
                        },
                        new
                        {
                            ID_Order = new Guid("cdb78f2c-1e54-4329-b93f-feb2152c8481"),
                            Auto = 0,
                            CustomerID = new Guid("ef456aed-853b-484a-9b8e-7a354343a9f6"),
                            OrderDate = new DateTime(2024, 10, 28, 10, 32, 31, 182, DateTimeKind.Utc).AddTicks(8777),
                            Status = "Pending",
                            TotalAmount = 30.00m
                        },
                        new
                        {
                            ID_Order = new Guid("1a6b752a-0d0f-4126-ba0c-b0d70ca168f6"),
                            Auto = 0,
                            CustomerID = new Guid("62b36541-e014-4dc8-a5c8-0c8d67fe4e2d"),
                            OrderDate = new DateTime(2024, 10, 28, 10, 32, 31, 182, DateTimeKind.Utc).AddTicks(8781),
                            Status = "Completed",
                            TotalAmount = 50.00m
                        },
                        new
                        {
                            ID_Order = new Guid("6771d369-c174-4c20-bca1-a7780e99a51e"),
                            Auto = 0,
                            CustomerID = new Guid("44c3edca-e622-4a7b-8089-01dc3f51fac4"),
                            OrderDate = new DateTime(2024, 10, 28, 10, 32, 31, 182, DateTimeKind.Utc).AddTicks(8785),
                            Status = "Shipped",
                            TotalAmount = 70.00m
                        });
                });

            modelBuilder.Entity("DBase.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("ID_OrderDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ID_OrderDetails");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            ID_OrderDetails = new Guid("f3c27b7b-f418-4f40-ae71-637772e1315e"),
                            Auto = 0,
                            OrderId = new Guid("8c7d5b08-505d-4d00-9557-866648608c4e"),
                            ProductId = new Guid("30101d30-76e5-4c42-b47f-9e079bf24b8e"),
                            Quantity = 2,
                            UnitPrice = 10.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("4277b559-dc5a-4c3e-a449-b65296abbb8a"),
                            Auto = 0,
                            OrderId = new Guid("8c7d5b08-505d-4d00-9557-866648608c4e"),
                            ProductId = new Guid("2c439fa7-a63c-4e97-be31-6593091279f5"),
                            Quantity = 1,
                            UnitPrice = 15.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("4d390f2e-0719-407d-8201-ea5978bff533"),
                            Auto = 0,
                            OrderId = new Guid("cdb78f2c-1e54-4329-b93f-feb2152c8481"),
                            ProductId = new Guid("bc2fcb70-37f5-4e1f-8249-3ff027d883a1"),
                            Quantity = 1,
                            UnitPrice = 20.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("1c5e8e90-615b-4d41-a105-2c2c3922e5d4"),
                            Auto = 0,
                            OrderId = new Guid("1a6b752a-0d0f-4126-ba0c-b0d70ca168f6"),
                            ProductId = new Guid("e885c463-146b-4421-86c7-3f9090c004fe"),
                            Quantity = 2,
                            UnitPrice = 25.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("7085974c-79fb-4df8-8d09-b26492a6834c"),
                            Auto = 0,
                            OrderId = new Guid("1a6b752a-0d0f-4126-ba0c-b0d70ca168f6"),
                            ProductId = new Guid("41269096-8133-4bb7-9b3a-6531e471cf5a"),
                            Quantity = 1,
                            UnitPrice = 30.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("28d37e7f-9edc-489a-9bc3-4e6f9069094c"),
                            Auto = 0,
                            OrderId = new Guid("6771d369-c174-4c20-bca1-a7780e99a51e"),
                            ProductId = new Guid("1d88ff7e-0a37-44a0-8bfe-d382ed746b69"),
                            Quantity = 2,
                            UnitPrice = 35.00m
                        });
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.Property<Guid>("ID_Product")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("Producer")
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uuid");

                    b.HasKey("ID_Product");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID_Product = new Guid("30101d30-76e5-4c42-b47f-9e079bf24b8e"),
                            Auto = 0,
                            Producer = "Producer 1",
                            ProductName = "Product 1",
                            QuantityInStock = 100,
                            SupplierID = new Guid("8de4871d-ff52-42f2-a664-308c7c1672dd"),
                            UnitPrice = 10.00m,
                            WarehouseID = new Guid("ebf8cdb6-f892-42ee-a69c-6ed05bb2dd74")
                        },
                        new
                        {
                            ID_Product = new Guid("2c439fa7-a63c-4e97-be31-6593091279f5"),
                            Auto = 0,
                            Producer = "Producer 2",
                            ProductName = "Product 2",
                            QuantityInStock = 200,
                            SupplierID = new Guid("8de4871d-ff52-42f2-a664-308c7c1672dd"),
                            UnitPrice = 15.00m,
                            WarehouseID = new Guid("ebf8cdb6-f892-42ee-a69c-6ed05bb2dd74")
                        },
                        new
                        {
                            ID_Product = new Guid("bc2fcb70-37f5-4e1f-8249-3ff027d883a1"),
                            Auto = 0,
                            Producer = "Producer 2",
                            ProductName = "Product 3",
                            QuantityInStock = 150,
                            SupplierID = new Guid("b35f2979-36c6-4e3e-8a33-65f3659b75ba"),
                            UnitPrice = 20.00m,
                            WarehouseID = new Guid("00bd2a5b-6f2d-4067-82c2-22873e9d4c03")
                        },
                        new
                        {
                            ID_Product = new Guid("e885c463-146b-4421-86c7-3f9090c004fe"),
                            Auto = 0,
                            Producer = "Producer 2",
                            ProductName = "Product 4",
                            QuantityInStock = 80,
                            SupplierID = new Guid("5856651c-1d91-434e-85f8-ded3da132755"),
                            UnitPrice = 25.00m,
                            WarehouseID = new Guid("569427e8-3cf6-4330-8420-611d878120a6")
                        },
                        new
                        {
                            ID_Product = new Guid("41269096-8133-4bb7-9b3a-6531e471cf5a"),
                            Auto = 0,
                            Producer = "Producer 3",
                            ProductName = "Product 5",
                            QuantityInStock = 60,
                            SupplierID = new Guid("5856651c-1d91-434e-85f8-ded3da132755"),
                            UnitPrice = 30.00m,
                            WarehouseID = new Guid("569427e8-3cf6-4330-8420-611d878120a6")
                        },
                        new
                        {
                            ID_Product = new Guid("1d88ff7e-0a37-44a0-8bfe-d382ed746b69"),
                            Auto = 0,
                            Producer = "Producer 3",
                            ProductName = "Product 6",
                            QuantityInStock = 40,
                            SupplierID = new Guid("17047b9b-939d-420a-b069-52a95f923682"),
                            UnitPrice = 35.00m,
                            WarehouseID = new Guid("c976f926-8da4-4ebb-8869-d102216b9438")
                        });
                });

            modelBuilder.Entity("DBase.Models.Supplier", b =>
                {
                    b.Property<Guid>("ID_Supplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("ContactName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID_Supplier");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            ID_Supplier = new Guid("8de4871d-ff52-42f2-a664-308c7c1672dd"),
                            Auto = 0,
                            ContactName = "Alice",
                            Email = "alice@supplier.com",
                            Phone = "123-456-7890",
                            SupplierName = "Supplier A"
                        },
                        new
                        {
                            ID_Supplier = new Guid("b35f2979-36c6-4e3e-8a33-65f3659b75ba"),
                            Auto = 0,
                            ContactName = "Bob",
                            Email = "bob@supplier.com",
                            Phone = "098-765-4321",
                            SupplierName = "Supplier B"
                        },
                        new
                        {
                            ID_Supplier = new Guid("5856651c-1d91-434e-85f8-ded3da132755"),
                            Auto = 0,
                            ContactName = "Charlie",
                            Email = "charlie@supplier.com",
                            Phone = "321-654-0987",
                            SupplierName = "Supplier C"
                        },
                        new
                        {
                            ID_Supplier = new Guid("17047b9b-939d-420a-b069-52a95f923682"),
                            Auto = 0,
                            ContactName = "Diana",
                            Email = "diana@supplier.com",
                            Phone = "987-654-3210",
                            SupplierName = "Supplier D"
                        });
                });

            modelBuilder.Entity("DBase.Models.Warehouse", b =>
                {
                    b.Property<Guid>("ID_Warehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID_Warehouse");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            ID_Warehouse = new Guid("ebf8cdb6-f892-42ee-a69c-6ed05bb2dd74"),
                            Auto = 0,
                            Capacity = 1000,
                            Location = "Location A",
                            ManagerName = "Manager A",
                            WarehouseName = "Warehouse 1"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("00bd2a5b-6f2d-4067-82c2-22873e9d4c03"),
                            Auto = 0,
                            Capacity = 2000,
                            Location = "Location B",
                            ManagerName = "Manager B",
                            WarehouseName = "Warehouse 2"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("569427e8-3cf6-4330-8420-611d878120a6"),
                            Auto = 0,
                            Capacity = 1500,
                            Location = "Location C",
                            ManagerName = "Manager C",
                            WarehouseName = "Warehouse 3"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("c976f926-8da4-4ebb-8869-d102216b9438"),
                            Auto = 0,
                            Capacity = 2500,
                            Location = "Location D",
                            ManagerName = "Manager D",
                            WarehouseName = "Warehouse 4"
                        });
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.HasOne("DBase.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DBase.Models.OrderDetail", b =>
                {
                    b.HasOne("DBase.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBase.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.HasOne("DBase.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBase.Models.Warehouse", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DBase.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DBase.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DBase.Models.Warehouse", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
