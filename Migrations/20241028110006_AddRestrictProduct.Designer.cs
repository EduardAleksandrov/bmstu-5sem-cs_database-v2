// <auto-generated />
using System;
using DBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241028110006_AddRestrictProduct")]
    partial class AddRestrictProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBase.Models.Customer", b =>
                {
                    b.Property<Guid>("ID_Customer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID_Customer");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID_Customer = new Guid("9ce6f493-f800-4080-bfb2-174a33fa1db9"),
                            Address = "123 Main St, Anytown, USA",
                            Auto = 0,
                            CustomerName = "John Doe",
                            Email = "john.doe@example.com",
                            Phone = "111-222-3333"
                        },
                        new
                        {
                            ID_Customer = new Guid("7df7e5c6-7827-47ef-989e-a872099081b1"),
                            Address = "456 Elm St, Othertown, USA",
                            Auto = 0,
                            CustomerName = "Jane Smith",
                            Email = "jane.smith@example.com",
                            Phone = "444-555-6666"
                        },
                        new
                        {
                            ID_Customer = new Guid("74368c6f-2875-4f41-88c9-a5c1cc7411bd"),
                            Address = "789 Pine St, Sometown, USA",
                            Auto = 0,
                            CustomerName = "Alice Johnson",
                            Email = "alice.johnson@example.com",
                            Phone = "222-333-4444"
                        },
                        new
                        {
                            ID_Customer = new Guid("ed43fb00-1cf9-4302-a462-7a14d256f7df"),
                            Address = "321 Oak St, Anothertown, USA",
                            Auto = 0,
                            CustomerName = "Bob Brown",
                            Email = "bob.brown@example.com",
                            Phone = "555-666-7777"
                        });
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.Property<Guid>("ID_Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("ID_Order");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID_Order = new Guid("58f5608d-3576-4ce4-921c-cfc1eac38346"),
                            Auto = 0,
                            CustomerID = new Guid("9ce6f493-f800-4080-bfb2-174a33fa1db9"),
                            OrderDate = new DateTime(2024, 10, 28, 11, 0, 6, 244, DateTimeKind.Utc).AddTicks(5826),
                            Status = "Completed",
                            TotalAmount = 25.00m
                        },
                        new
                        {
                            ID_Order = new Guid("1c318181-eba4-4257-b814-b23c7060c232"),
                            Auto = 0,
                            CustomerID = new Guid("7df7e5c6-7827-47ef-989e-a872099081b1"),
                            OrderDate = new DateTime(2024, 10, 28, 11, 0, 6, 244, DateTimeKind.Utc).AddTicks(5836),
                            Status = "Pending",
                            TotalAmount = 30.00m
                        },
                        new
                        {
                            ID_Order = new Guid("84baad39-9601-4def-ab33-0375b546a364"),
                            Auto = 0,
                            CustomerID = new Guid("74368c6f-2875-4f41-88c9-a5c1cc7411bd"),
                            OrderDate = new DateTime(2024, 10, 28, 11, 0, 6, 244, DateTimeKind.Utc).AddTicks(5841),
                            Status = "Completed",
                            TotalAmount = 50.00m
                        },
                        new
                        {
                            ID_Order = new Guid("122189ba-dcff-45fa-95e0-c6c730cea839"),
                            Auto = 0,
                            CustomerID = new Guid("ed43fb00-1cf9-4302-a462-7a14d256f7df"),
                            OrderDate = new DateTime(2024, 10, 28, 11, 0, 6, 244, DateTimeKind.Utc).AddTicks(5847),
                            Status = "Shipped",
                            TotalAmount = 70.00m
                        });
                });

            modelBuilder.Entity("DBase.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("ID_OrderDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ID_OrderDetails");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            ID_OrderDetails = new Guid("85869e2e-0f8b-429b-b3c6-b9ba348205dd"),
                            Auto = 0,
                            OrderId = new Guid("58f5608d-3576-4ce4-921c-cfc1eac38346"),
                            ProductId = new Guid("2be1bc92-f148-4982-868d-8730fcb36e94"),
                            Quantity = 2,
                            UnitPrice = 10.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("9605de62-ca9d-47c3-b4f4-bf7c9fc1935c"),
                            Auto = 0,
                            OrderId = new Guid("58f5608d-3576-4ce4-921c-cfc1eac38346"),
                            ProductId = new Guid("27274e5a-ec71-46ce-a3c2-6ae38ccf7f04"),
                            Quantity = 1,
                            UnitPrice = 15.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("5debb45f-46cf-4bab-addf-33dfd54c4cef"),
                            Auto = 0,
                            OrderId = new Guid("1c318181-eba4-4257-b814-b23c7060c232"),
                            ProductId = new Guid("3d86c84d-3eeb-4716-92a7-ab46c2285b24"),
                            Quantity = 1,
                            UnitPrice = 20.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("ae56d31c-4061-443a-909a-72832316c9d6"),
                            Auto = 0,
                            OrderId = new Guid("84baad39-9601-4def-ab33-0375b546a364"),
                            ProductId = new Guid("ab71556f-0eef-4112-8c4a-ec1c38fc0ab7"),
                            Quantity = 2,
                            UnitPrice = 25.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("e0e6da09-90d1-4c25-b249-a7f99819ba31"),
                            Auto = 0,
                            OrderId = new Guid("84baad39-9601-4def-ab33-0375b546a364"),
                            ProductId = new Guid("7ae5747f-d93a-48d3-aa66-286c8ac96866"),
                            Quantity = 1,
                            UnitPrice = 30.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("e319e9d5-8b55-4652-8d49-017d14b9a2f6"),
                            Auto = 0,
                            OrderId = new Guid("122189ba-dcff-45fa-95e0-c6c730cea839"),
                            ProductId = new Guid("7bda535b-8987-441a-a27c-a3f17130057e"),
                            Quantity = 2,
                            UnitPrice = 35.00m
                        });
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.Property<Guid>("ID_Product")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("Producer")
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uuid");

                    b.HasKey("ID_Product");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID_Product = new Guid("2be1bc92-f148-4982-868d-8730fcb36e94"),
                            Auto = 0,
                            Producer = "Producer 1",
                            ProductName = "Product 1",
                            QuantityInStock = 100,
                            SupplierID = new Guid("423e412e-5bc4-40e8-a293-b6ff00da0858"),
                            UnitPrice = 10.00m,
                            WarehouseID = new Guid("bc0ace60-4af9-423f-ab19-e9deb97c38aa")
                        },
                        new
                        {
                            ID_Product = new Guid("27274e5a-ec71-46ce-a3c2-6ae38ccf7f04"),
                            Auto = 0,
                            Producer = "Producer 2",
                            ProductName = "Product 2",
                            QuantityInStock = 200,
                            SupplierID = new Guid("423e412e-5bc4-40e8-a293-b6ff00da0858"),
                            UnitPrice = 15.00m,
                            WarehouseID = new Guid("bc0ace60-4af9-423f-ab19-e9deb97c38aa")
                        },
                        new
                        {
                            ID_Product = new Guid("3d86c84d-3eeb-4716-92a7-ab46c2285b24"),
                            Auto = 0,
                            Producer = "Producer 2",
                            ProductName = "Product 3",
                            QuantityInStock = 150,
                            SupplierID = new Guid("9249059d-a860-4abd-a5af-b7e903b69381"),
                            UnitPrice = 20.00m,
                            WarehouseID = new Guid("cfc02977-4cb7-4979-80da-866a23282440")
                        },
                        new
                        {
                            ID_Product = new Guid("ab71556f-0eef-4112-8c4a-ec1c38fc0ab7"),
                            Auto = 0,
                            Producer = "Producer 2",
                            ProductName = "Product 4",
                            QuantityInStock = 80,
                            SupplierID = new Guid("a3fe4dc4-dbf1-4933-b07b-33f4da24816c"),
                            UnitPrice = 25.00m,
                            WarehouseID = new Guid("ccd019cf-68d6-42e2-87b3-6240b5137ffb")
                        },
                        new
                        {
                            ID_Product = new Guid("7ae5747f-d93a-48d3-aa66-286c8ac96866"),
                            Auto = 0,
                            Producer = "Producer 3",
                            ProductName = "Product 5",
                            QuantityInStock = 60,
                            SupplierID = new Guid("a3fe4dc4-dbf1-4933-b07b-33f4da24816c"),
                            UnitPrice = 30.00m,
                            WarehouseID = new Guid("ccd019cf-68d6-42e2-87b3-6240b5137ffb")
                        },
                        new
                        {
                            ID_Product = new Guid("7bda535b-8987-441a-a27c-a3f17130057e"),
                            Auto = 0,
                            Producer = "Producer 3",
                            ProductName = "Product 6",
                            QuantityInStock = 40,
                            SupplierID = new Guid("56f552cd-e7d3-431a-b141-38cafe618b60"),
                            UnitPrice = 35.00m,
                            WarehouseID = new Guid("9ddcc8e3-681d-4fc8-9d1f-d1f25b4f7cfa")
                        });
                });

            modelBuilder.Entity("DBase.Models.Supplier", b =>
                {
                    b.Property<Guid>("ID_Supplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("ContactName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID_Supplier");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            ID_Supplier = new Guid("423e412e-5bc4-40e8-a293-b6ff00da0858"),
                            Auto = 0,
                            ContactName = "Alice",
                            Email = "alice@supplier.com",
                            Phone = "123-456-7890",
                            SupplierName = "Supplier A"
                        },
                        new
                        {
                            ID_Supplier = new Guid("9249059d-a860-4abd-a5af-b7e903b69381"),
                            Auto = 0,
                            ContactName = "Bob",
                            Email = "bob@supplier.com",
                            Phone = "098-765-4321",
                            SupplierName = "Supplier B"
                        },
                        new
                        {
                            ID_Supplier = new Guid("a3fe4dc4-dbf1-4933-b07b-33f4da24816c"),
                            Auto = 0,
                            ContactName = "Charlie",
                            Email = "charlie@supplier.com",
                            Phone = "321-654-0987",
                            SupplierName = "Supplier C"
                        },
                        new
                        {
                            ID_Supplier = new Guid("56f552cd-e7d3-431a-b141-38cafe618b60"),
                            Auto = 0,
                            ContactName = "Diana",
                            Email = "diana@supplier.com",
                            Phone = "987-654-3210",
                            SupplierName = "Supplier D"
                        });
                });

            modelBuilder.Entity("DBase.Models.Warehouse", b =>
                {
                    b.Property<Guid>("ID_Warehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID_Warehouse");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            ID_Warehouse = new Guid("bc0ace60-4af9-423f-ab19-e9deb97c38aa"),
                            Auto = 0,
                            Capacity = 1000,
                            Location = "Location A",
                            ManagerName = "Manager A",
                            WarehouseName = "Warehouse 1"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("cfc02977-4cb7-4979-80da-866a23282440"),
                            Auto = 0,
                            Capacity = 2000,
                            Location = "Location B",
                            ManagerName = "Manager B",
                            WarehouseName = "Warehouse 2"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("ccd019cf-68d6-42e2-87b3-6240b5137ffb"),
                            Auto = 0,
                            Capacity = 1500,
                            Location = "Location C",
                            ManagerName = "Manager C",
                            WarehouseName = "Warehouse 3"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("9ddcc8e3-681d-4fc8-9d1f-d1f25b4f7cfa"),
                            Auto = 0,
                            Capacity = 2500,
                            Location = "Location D",
                            ManagerName = "Manager D",
                            WarehouseName = "Warehouse 4"
                        });
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.HasOne("DBase.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DBase.Models.OrderDetail", b =>
                {
                    b.HasOne("DBase.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBase.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.HasOne("DBase.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBase.Models.Warehouse", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DBase.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DBase.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DBase.Models.Warehouse", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
