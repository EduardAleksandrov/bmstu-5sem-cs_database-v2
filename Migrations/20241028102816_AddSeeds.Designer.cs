// <auto-generated />
using System;
using DBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241028102816_AddSeeds")]
    partial class AddSeeds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBase.Models.Customer", b =>
                {
                    b.Property<Guid>("ID_Customer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID_Customer");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID_Customer = new Guid("dbaaf315-b12f-48a2-90ae-44ab9e8c927e"),
                            Address = "123 Main St, Anytown, USA",
                            Auto = 0,
                            CustomerName = "John Doe",
                            Email = "john.doe@example.com",
                            Phone = "111-222-3333"
                        },
                        new
                        {
                            ID_Customer = new Guid("d5b8dcce-07c9-428b-ab93-88ca6ca1eeb4"),
                            Address = "456 Elm St, Othertown, USA",
                            Auto = 0,
                            CustomerName = "Jane Smith",
                            Email = "jane.smith@example.com",
                            Phone = "444-555-6666"
                        },
                        new
                        {
                            ID_Customer = new Guid("5dde43ea-efc2-4890-9ca1-a083f5845c4d"),
                            Address = "789 Pine St, Sometown, USA",
                            Auto = 0,
                            CustomerName = "Alice Johnson",
                            Email = "alice.johnson@example.com",
                            Phone = "222-333-4444"
                        },
                        new
                        {
                            ID_Customer = new Guid("cd10daad-9572-41b5-a0cb-a4cf89740b13"),
                            Address = "321 Oak St, Anothertown, USA",
                            Auto = 0,
                            CustomerName = "Bob Brown",
                            Email = "bob.brown@example.com",
                            Phone = "555-666-7777"
                        });
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.Property<Guid>("ID_Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("ID_Order");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID_Order = new Guid("4715c991-cadf-46b8-8d5d-7c3345662a6f"),
                            Auto = 0,
                            CustomerID = new Guid("dbaaf315-b12f-48a2-90ae-44ab9e8c927e"),
                            OrderDate = new DateTime(2024, 10, 28, 10, 28, 15, 658, DateTimeKind.Utc).AddTicks(580),
                            Status = "Completed",
                            TotalAmount = 25.00m
                        },
                        new
                        {
                            ID_Order = new Guid("b49bb357-cf70-4ecc-b7a5-5aef750eb35a"),
                            Auto = 0,
                            CustomerID = new Guid("d5b8dcce-07c9-428b-ab93-88ca6ca1eeb4"),
                            OrderDate = new DateTime(2024, 10, 28, 10, 28, 15, 658, DateTimeKind.Utc).AddTicks(584),
                            Status = "Pending",
                            TotalAmount = 30.00m
                        },
                        new
                        {
                            ID_Order = new Guid("ddbcdb77-31c9-481d-9788-f700a1d57325"),
                            Auto = 0,
                            CustomerID = new Guid("5dde43ea-efc2-4890-9ca1-a083f5845c4d"),
                            OrderDate = new DateTime(2024, 10, 28, 10, 28, 15, 658, DateTimeKind.Utc).AddTicks(588),
                            Status = "Completed",
                            TotalAmount = 50.00m
                        },
                        new
                        {
                            ID_Order = new Guid("6c9adfe8-cee0-4c77-a4ac-e72aefac0467"),
                            Auto = 0,
                            CustomerID = new Guid("cd10daad-9572-41b5-a0cb-a4cf89740b13"),
                            OrderDate = new DateTime(2024, 10, 28, 10, 28, 15, 658, DateTimeKind.Utc).AddTicks(592),
                            Status = "Shipped",
                            TotalAmount = 70.00m
                        });
                });

            modelBuilder.Entity("DBase.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("ID_OrderDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ID_OrderDetails");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            ID_OrderDetails = new Guid("712abce0-c8a1-4409-951f-0dd33d3be448"),
                            Auto = 0,
                            OrderId = new Guid("4715c991-cadf-46b8-8d5d-7c3345662a6f"),
                            ProductId = new Guid("1e2fbe56-ff03-4dc8-9272-07c514ccdd33"),
                            Quantity = 2,
                            UnitPrice = 10.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("76b15641-1b5c-40c1-8197-cae39ab812a1"),
                            Auto = 0,
                            OrderId = new Guid("4715c991-cadf-46b8-8d5d-7c3345662a6f"),
                            ProductId = new Guid("1bf9e1cf-4708-409a-b902-33515b025bac"),
                            Quantity = 1,
                            UnitPrice = 15.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("fdd06504-7d59-4fbb-9514-8b42b017ffc2"),
                            Auto = 0,
                            OrderId = new Guid("b49bb357-cf70-4ecc-b7a5-5aef750eb35a"),
                            ProductId = new Guid("62929d0f-cd54-4707-a300-9e97f76277d2"),
                            Quantity = 1,
                            UnitPrice = 20.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("82e6cfe6-5937-4b91-94c4-63c94415964c"),
                            Auto = 0,
                            OrderId = new Guid("ddbcdb77-31c9-481d-9788-f700a1d57325"),
                            ProductId = new Guid("bf2b0fc6-863d-4f7f-ab14-987350645e2d"),
                            Quantity = 2,
                            UnitPrice = 25.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("e1016e01-6976-4ba7-9072-37a1f58ef51f"),
                            Auto = 0,
                            OrderId = new Guid("ddbcdb77-31c9-481d-9788-f700a1d57325"),
                            ProductId = new Guid("666e14f6-25b4-46f5-ab4d-4318e5369991"),
                            Quantity = 1,
                            UnitPrice = 30.00m
                        },
                        new
                        {
                            ID_OrderDetails = new Guid("0dd0b168-7011-4522-b9c1-f193eeee5ec9"),
                            Auto = 0,
                            OrderId = new Guid("6c9adfe8-cee0-4c77-a4ac-e72aefac0467"),
                            ProductId = new Guid("3f8b7d19-df8b-4b3f-8d8f-7f6065e65272"),
                            Quantity = 2,
                            UnitPrice = 35.00m
                        });
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.Property<Guid>("ID_Product")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("Producer")
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uuid");

                    b.HasKey("ID_Product");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID_Product = new Guid("1e2fbe56-ff03-4dc8-9272-07c514ccdd33"),
                            Auto = 0,
                            Producer = "Producer 1",
                            ProductName = "Product 1",
                            QuantityInStock = 100,
                            SupplierID = new Guid("e47e5495-d0cd-43e0-afca-3716aea53e9c"),
                            UnitPrice = 10.00m,
                            WarehouseID = new Guid("10eb5383-8f4d-43ec-887b-a220ee17ade4")
                        },
                        new
                        {
                            ID_Product = new Guid("1bf9e1cf-4708-409a-b902-33515b025bac"),
                            Auto = 0,
                            Producer = "Producer 2",
                            ProductName = "Product 2",
                            QuantityInStock = 200,
                            SupplierID = new Guid("e47e5495-d0cd-43e0-afca-3716aea53e9c"),
                            UnitPrice = 15.00m,
                            WarehouseID = new Guid("10eb5383-8f4d-43ec-887b-a220ee17ade4")
                        },
                        new
                        {
                            ID_Product = new Guid("62929d0f-cd54-4707-a300-9e97f76277d2"),
                            Auto = 0,
                            Producer = "Producer 3",
                            ProductName = "Product 3",
                            QuantityInStock = 150,
                            SupplierID = new Guid("b9bf157c-4a39-484e-8c5d-4ce21bb4d420"),
                            UnitPrice = 20.00m,
                            WarehouseID = new Guid("b6d0d532-7005-4ac1-9f6f-9cb41eb9fa3d")
                        },
                        new
                        {
                            ID_Product = new Guid("bf2b0fc6-863d-4f7f-ab14-987350645e2d"),
                            Auto = 0,
                            Producer = "Producer 4",
                            ProductName = "Product 4",
                            QuantityInStock = 80,
                            SupplierID = new Guid("3366d527-f425-4951-97ff-76c51f22ac15"),
                            UnitPrice = 25.00m,
                            WarehouseID = new Guid("177c534f-f59c-4f99-bd79-ad99828c1d29")
                        },
                        new
                        {
                            ID_Product = new Guid("666e14f6-25b4-46f5-ab4d-4318e5369991"),
                            Auto = 0,
                            Producer = "Producer 5",
                            ProductName = "Product 5",
                            QuantityInStock = 60,
                            SupplierID = new Guid("3366d527-f425-4951-97ff-76c51f22ac15"),
                            UnitPrice = 30.00m,
                            WarehouseID = new Guid("177c534f-f59c-4f99-bd79-ad99828c1d29")
                        },
                        new
                        {
                            ID_Product = new Guid("3f8b7d19-df8b-4b3f-8d8f-7f6065e65272"),
                            Auto = 0,
                            Producer = "Producer 6",
                            ProductName = "Product 6",
                            QuantityInStock = 40,
                            SupplierID = new Guid("cb8c6415-4feb-4615-bda4-35f2404fa63b"),
                            UnitPrice = 35.00m,
                            WarehouseID = new Guid("39aaf70b-dcff-43a0-9ca1-00b945cbb761")
                        });
                });

            modelBuilder.Entity("DBase.Models.Supplier", b =>
                {
                    b.Property<Guid>("ID_Supplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<string>("ContactName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID_Supplier");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            ID_Supplier = new Guid("e47e5495-d0cd-43e0-afca-3716aea53e9c"),
                            Auto = 0,
                            ContactName = "Alice",
                            Email = "alice@supplier.com",
                            Phone = "123-456-7890",
                            SupplierName = "Supplier A"
                        },
                        new
                        {
                            ID_Supplier = new Guid("b9bf157c-4a39-484e-8c5d-4ce21bb4d420"),
                            Auto = 0,
                            ContactName = "Bob",
                            Email = "bob@supplier.com",
                            Phone = "098-765-4321",
                            SupplierName = "Supplier B"
                        },
                        new
                        {
                            ID_Supplier = new Guid("3366d527-f425-4951-97ff-76c51f22ac15"),
                            Auto = 0,
                            ContactName = "Charlie",
                            Email = "charlie@supplier.com",
                            Phone = "321-654-0987",
                            SupplierName = "Supplier C"
                        },
                        new
                        {
                            ID_Supplier = new Guid("cb8c6415-4feb-4615-bda4-35f2404fa63b"),
                            Auto = 0,
                            ContactName = "Diana",
                            Email = "diana@supplier.com",
                            Phone = "987-654-3210",
                            SupplierName = "Supplier D"
                        });
                });

            modelBuilder.Entity("DBase.Models.Warehouse", b =>
                {
                    b.Property<Guid>("ID_Warehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Auto"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID_Warehouse");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            ID_Warehouse = new Guid("10eb5383-8f4d-43ec-887b-a220ee17ade4"),
                            Auto = 0,
                            Capacity = 1000,
                            Location = "Location A",
                            ManagerName = "Manager A",
                            WarehouseName = "Warehouse 1"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("b6d0d532-7005-4ac1-9f6f-9cb41eb9fa3d"),
                            Auto = 0,
                            Capacity = 2000,
                            Location = "Location B",
                            ManagerName = "Manager B",
                            WarehouseName = "Warehouse 2"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("177c534f-f59c-4f99-bd79-ad99828c1d29"),
                            Auto = 0,
                            Capacity = 1500,
                            Location = "Location C",
                            ManagerName = "Manager C",
                            WarehouseName = "Warehouse 3"
                        },
                        new
                        {
                            ID_Warehouse = new Guid("39aaf70b-dcff-43a0-9ca1-00b945cbb761"),
                            Auto = 0,
                            Capacity = 2500,
                            Location = "Location D",
                            ManagerName = "Manager D",
                            WarehouseName = "Warehouse 4"
                        });
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.HasOne("DBase.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DBase.Models.OrderDetail", b =>
                {
                    b.HasOne("DBase.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBase.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.HasOne("DBase.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBase.Models.Warehouse", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DBase.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DBase.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DBase.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DBase.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DBase.Models.Warehouse", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
